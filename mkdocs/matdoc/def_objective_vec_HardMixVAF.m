function fun_vec = def_objective_vec_HardMixVAF(in,data)
% def_objective_vec_HardMixVAF creates an objective function handle
%
% ## Comments
% 
% This function creates an objective function handle. The function handle
% takes the material parameters as input. Note that the function handle
% does not return a scalar but a vector. The Matlab build-in optimizer
% (e.g., lsqnonlin) minimizes the sum of squared entries of this vector.
% 
% A __Matlab executable file__ (.mex file) may be used to accelerate the
% objective function evaluation.
% 
% ## Input Arguments
% 
% `in` (_struct_) - see `opt_input` documentation
% 
% `data` (_struct_) - FEM data
% 
% `data.results.u` (_double_) - displacement data for every load step
% (every column corresponds to one load step)
% 
% `data.results.reaction` (_double_) - reaction force data for every load
% step
% 
% `data.algorithm.n_NR_local` (_double_) - maximum number of Newton-Raphson
% iterations used for solving the local problem (return mapping algorithm)
% 
% `data.algorithm.tol_NR_local` (_double_) - stopping tolerance for the
% Newton-Raphson iteration used for solving the local problem (return
% mapping algorithm)
% 
% `data.mesh.n_dof` (_double_) - number of degrees of freedom in the mesh
% 
% `data.mesh.dof` (_double_) - degrees of freedom
% 
% `data.mesh.n_element` (_double_) - number of finite elements in the mesh
% 
% `data.mesh.n_dof_per_element` (_double_) - number of degrees of freedom
% per finite element
% 
% `data.mesh.element_dof` (_double_) - degrees of freedom at each finite
% element element (each row provides all degrees of freedom at the
% corresponding finite element)
% 
% `data.mesh.Gauss_weights` (_double_) - Gaussian quadrature weights
% 
% `data.mesh.n_Gauss_per_dim` (_double_) - number of Gauss points per
% dimension
% 
% `data.mesh.detJ_GP` (_double_) - determinant of the Jacobian at each
% Gauss point needed for mapping integrals between the reference and
% physical finite element
% 
% `data.mesh.B_GP` (_double_) - help matrix at each Gauss point needed for
% calculating shape function derivatives
% 
% `data.bc.dof_fix` (_double_) - fixed degrees of freedom
% 
% `data.bc.dof_displacement` (_double_) - free degrees of freedom
% 
% `data.bc.dof_reaction` (_double_) - degrees of freedom corresponding to
% reaction forces
% 
% ## Output Arguments
% 
% `fun_vec` (*function_handle*) - objective function handle

dof_free = setdiff(data.mesh.dof, [data.bc.dof_fix, data.bc.dof_displacement]);

%% Objective Function with Fixed Parameters
if ~in.use_mex
    fun_vec = @(parameters) objective_vec_HardMixVAF( ...
        ... % (hyper-)parameters
        parameters, ...
        in.q_case, ...
        in.q, ...
        in.lambda_r, ...
        in.lambda_p, ...
        in.p, ...
        in.n_eval, ...
        ... % FEM results
        data.results.u, ...
        data.results.reaction, ...
        ... % algorithm
        data.algorithm.n_NR_local, ...
        data.algorithm.tol_NR_local, ...
        ... % material
        data.material.CPlaneStress, ...
        data.material.SPlaneStress, ...
        ... % mesh
        data.mesh.n_dof, ...
        data.mesh.n_element, ...
        data.mesh.n_dof_per_element, ...
        data.mesh.element_dof, ...
        data.mesh.Gauss_weights, ...
        data.mesh.n_Gauss_per_dim, ...
        data.mesh.detJ_GP, ...
        data.mesh.B_GP, ...
        ... % bc
        dof_free, ...
        data.bc.dof_reaction ...
        );
else
    fun_vec = @(parameters) objective_vec_HardMixVAF_mex( ...
        ... % (hyper-)parameters
        parameters, ...
        in.q_case, ...
        in.q, ...
        in.lambda_r, ...
        in.lambda_p, ...
        in.p, ...
        in.n_eval, ...
        ... % FEM results
        data.results.u, ...
        data.results.reaction, ...
        ... % algorithm
        data.algorithm.n_NR_local, ...
        data.algorithm.tol_NR_local, ...
        ... % material
        data.material.CPlaneStress, ...
        data.material.SPlaneStress, ...
        ... % mesh
        data.mesh.n_dof, ...
        data.mesh.n_element, ...
        data.mesh.n_dof_per_element, ...
        data.mesh.element_dof, ...
        data.mesh.Gauss_weights, ...
        data.mesh.n_Gauss_per_dim, ...
        data.mesh.detJ_GP, ...
        data.mesh.B_GP, ...
        ... % bc
        dof_free, ...
        data.bc.dof_reaction ...
        );
end

end