function CC = get_CCFD_VEVPHardMixLin( ...
    Gi, ...
    gi, ...
    Ki, ...
    ki, ...
    Ginf, ...
    Kinf, ...
    H_iso, ... % isotropic hardening parameter
    H_kin, ... % kinematic hardening parameter
    eta, ...
    sigma_0, ...
    time_inc, ...
    epsilonV, ...
    alphaV_prev, ... % viscoelastic strain @ n
    epsilonVvp_prev, ... % viscoplastic strain @ n
    gamma_prev, ... % plastic multiplier @ n
    FD ...
    )
% get_CCFD_VEVPHardMixLin computes the consistent tangent modulus
% using finite differences

CC = zeros(6,6);
for i = 1:6
    depsilonV = zeros(size(epsilonV));
    depsilonV(i) = FD;

    epsilonV_plus = epsilonV + 0.5*depsilonV;
    sigmaV_plus = local_problem_VEVPHardMixLin_notan( ...
        Gi, ...
        gi, ...
        Ki, ...
        ki, ...
        Ginf, ...
        Kinf, ...
        H_iso, ... % isotropic hardening parameter
        H_kin, ... % kinematic hardening parameter
        eta, ...
        sigma_0, ...
        time_inc, ...
        epsilonV_plus, ... % strain increment
        alphaV_prev, ... % viscoelastic strain @ n
        epsilonVvp_prev, ... % viscoplastic strain @ n
        gamma_prev ... % plastic multiplier @ n
        );

    epsilonV_minus = epsilonV - 0.5*depsilonV;
    sigmaV_minus = local_problem_VEVPHardMixLin_notan( ...
        Gi, ...
        gi, ...
        Ki, ...
        ki, ...
        Ginf, ...
        Kinf, ...
        H_iso, ... % isotropic hardening parameter
        H_kin, ... % kinematic hardening parameter
        eta, ...
        sigma_0, ...
        time_inc, ...
        epsilonV_minus, ... % strain increment
        alphaV_prev, ... % viscoelastic strain @ n
        epsilonVvp_prev, ... % viscoplastic strain @ n
        gamma_prev ... % plastic multiplier @ n
        );

    CC(:,i) = (sigmaV_plus - sigmaV_minus)/FD;
end

end